import 'dart:async';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter/foundation.dart';
import 'logger_service.dart';

/// Servi√ßo de notifica√ß√µes locais para alertas de √°rea segura
/// Gerencia permiss√µes, configura√ß√£o e envio de notifica√ß√µes
class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _notifications = FlutterLocalNotificationsPlugin();
  bool _isInitialized = false;

  // Rastreamento de estado da √°rea segura
  bool? _lastKnownSafeZoneState; // null = desconhecido, true = fora, false = dentro
  DateTime? _lastNotificationTime; // √öltima vez que uma notifica√ß√£o foi enviada
  Timer? _repeatingNotificationTimer; // Timer para notifica√ß√µes repetidas

  static const Duration _notificationRepeatInterval = Duration(minutes: 5);

  /// Inicializa o servi√ßo de notifica√ß√µes
  Future<void> initialize() async {
    if (_isInitialized) return;

    // Configura√ß√µes para Android
    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');

    // Configura√ß√µes para iOS
    const iosSettings = DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    // Configura√ß√µes gerais
    const initSettings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
    );

    // Inicializa o plugin
    await _notifications.initialize(
      initSettings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // ‚úÖ CR√çTICO: Cria o canal de notifica√ß√£o no Android
    await _createNotificationChannel();

    // Solicita permiss√µes
    await _requestPermissions();

    _isInitialized = true;
  }

  /// Cria o canal de notifica√ß√£o no Android
  /// SEM ISSO, AS NOTIFICA√á√ïES N√ÉO APARECEM!
  Future<void> _createNotificationChannel() async {
    if (defaultTargetPlatform == TargetPlatform.android) {
      final androidChannel = AndroidNotificationChannel(
        'safe_zone_alerts', // ID do canal (deve ser o mesmo usado em sendSafeZoneAlert)
        'Alertas de √Årea Segura', // Nome do canal
        description: 'Notifica√ß√µes quando o pet sai da √°rea segura',
        importance: Importance.max,
        playSound: true,
        enableVibration: true,
        vibrationPattern: Int64List.fromList([0, 500, 250, 500]),
      );

      final androidImplementation = _notifications.resolvePlatformSpecificImplementation<
          AndroidFlutterLocalNotificationsPlugin>();

      if (androidImplementation != null) {
        await androidImplementation.createNotificationChannel(androidChannel);
      }
    }
  }

  /// Solicita permiss√µes de notifica√ß√£o
  Future<void> _requestPermissions() async {
    // Android 13+ requer permiss√£o expl√≠cita
    if (defaultTargetPlatform == TargetPlatform.android) {
      await Permission.notification.request();
    }

    // iOS requer permiss√µes espec√≠ficas
    if (defaultTargetPlatform == TargetPlatform.iOS) {
      await _notifications
          .resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );
    }
  }

  /// Callback quando a notifica√ß√£o √© tocada
  void _onNotificationTapped(NotificationResponse response) {
    // Aqui voc√™ pode navegar para uma tela espec√≠fica se necess√°rio
  }

  /// Envia notifica√ß√£o de alerta quando o pet sai/retorna da √°rea segura
  /// Implementa l√≥gica de transi√ß√£o de estado e notifica√ß√µes repetidas
  Future<void> sendSafeZoneAlert({
    required String petName,
    required bool isOutside,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    // Detecta transi√ß√£o de estado
    final hasStateChanged = _lastKnownSafeZoneState != isOutside;

    // Atualiza o estado conhecido
    _lastKnownSafeZoneState = isOutside;

    if (isOutside) {
      // Pet est√° FORA da √°rea segura
      if (hasStateChanged) {
        // TRANSI√á√ÉO: Pet ACABOU DE SAIR da √°rea segura
        LoggerService.warning('üö® Pet saiu da √°rea segura!');
        await _sendOutsideNotification(petName);
        _lastNotificationTime = DateTime.now();

        // Inicia timer para notifica√ß√µes repetidas a cada 5 minutos
        _startRepeatingNotificationTimer(petName);
      }
      // Se n√£o houve mudan√ßa de estado, o timer j√° est√° ativo
    } else {
      // Pet est√° DENTRO da √°rea segura
      if (hasStateChanged) {
        // TRANSI√á√ÉO: Pet RETORNOU √† √°rea segura
        LoggerService.success('‚úÖ Pet retornou √† √°rea segura!');

        // Cancela timer de notifica√ß√µes repetidas
        _repeatingNotificationTimer?.cancel();
        _repeatingNotificationTimer = null;

        // Envia notifica√ß√£o de retorno
        await _sendReturnNotification(petName);
        _lastNotificationTime = DateTime.now();
      }
    }
  }

  /// Envia notifica√ß√£o quando o pet sai da √°rea segura
  Future<void> _sendOutsideNotification(String petName) async {
    final androidDetails = AndroidNotificationDetails(
      'safe_zone_alerts',
      'Alertas de √Årea Segura',
      channelDescription: 'Notifica√ß√µes quando o pet sai da √°rea segura',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      vibrationPattern: Int64List.fromList([0, 500, 250, 500]),
      icon: '@mipmap/ic_launcher',
      largeIcon: const DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
      styleInformation: const BigTextStyleInformation(
        'Seu pet est√° fora da √°rea segura!',
        contentTitle: '‚ö†Ô∏è Aten√ß√£o',
        summaryText: 'PetDex',
      ),
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
      interruptionLevel: InterruptionLevel.timeSensitive,
    );

    final notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    try {
      await _notifications.show(
        1, // ID √∫nico para notifica√ß√µes de sa√≠da
        '‚ö†Ô∏è Aten√ß√£o',
        '$petName est√° fora da √°rea segura!',
        notificationDetails,
        payload: 'safe_zone_alert_outside',
      );
    } catch (e) {
      LoggerService.error('‚ùå Erro ao enviar notifica√ß√£o de sa√≠da: $e', error: e);
    }
  }

  /// Envia notifica√ß√£o quando o pet retorna √† √°rea segura
  Future<void> _sendReturnNotification(String petName) async {
    final androidDetails = AndroidNotificationDetails(
      'safe_zone_alerts',
      'Alertas de √Årea Segura',
      channelDescription: 'Notifica√ß√µes quando o pet retorna √† √°rea segura',
      importance: Importance.high,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      vibrationPattern: Int64List.fromList([0, 250, 250, 250]),
      icon: '@mipmap/ic_launcher',
      largeIcon: const DrawableResourceAndroidBitmap('@mipmap/ic_launcher'),
      styleInformation: const BigTextStyleInformation(
        'Seu pet retornou √† √°rea segura!',
        contentTitle: '‚úÖ Seguro',
        summaryText: 'PetDex',
      ),
    );

    const iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'default',
      interruptionLevel: InterruptionLevel.timeSensitive,
    );

    final notificationDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    try {
      await _notifications.show(
        2, // ID √∫nico para notifica√ß√µes de retorno
        '‚úÖ Seguro',
        '$petName retornou √† √°rea segura!',
        notificationDetails,
        payload: 'safe_zone_alert_return',
      );
    } catch (e) {
      LoggerService.error('‚ùå Erro ao enviar notifica√ß√£o de retorno: $e', error: e);
    }
  }

  /// Inicia timer para enviar notifica√ß√µes repetidas a cada 5 minutos
  void _startRepeatingNotificationTimer(String petName) {
    // Cancela timer anterior se existir
    _repeatingNotificationTimer?.cancel();

    // Inicia novo timer
    _repeatingNotificationTimer = Timer.periodic(
      _notificationRepeatInterval,
      (timer) async {
        // Verifica se o pet ainda est√° fora (estado n√£o mudou)
        if (_lastKnownSafeZoneState == true) {
          LoggerService.info('üîî Reenviando notifica√ß√£o de √°rea segura (5 minutos)');
          await _sendOutsideNotification(petName);
          _lastNotificationTime = DateTime.now();
        } else {
          // Pet retornou, cancela o timer
          timer.cancel();
          _repeatingNotificationTimer = null;
        }
      },
    );
  }

  /// Cancela todas as notifica√ß√µes
  Future<void> cancelAll() async {
    await _notifications.cancelAll();
  }

  /// Reseta o estado de notifica√ß√µes (√∫til para testes)
  void resetNotificationState() {
    _lastKnownSafeZoneState = null;
    _lastNotificationTime = null;
    _repeatingNotificationTimer?.cancel();
    _repeatingNotificationTimer = null;
  }

  /// Cancela o timer de notifica√ß√µes repetidas
  void cancelRepeatingNotifications() {
    _repeatingNotificationTimer?.cancel();
    _repeatingNotificationTimer = null;
  }

  /// Verifica se as permiss√µes est√£o concedidas
  Future<bool> hasPermissions() async {
    if (defaultTargetPlatform == TargetPlatform.android) {
      final status = await Permission.notification.status;
      return status.isGranted;
    }
    // iOS sempre retorna true ap√≥s solicitar permiss√µes
    return true;
  }

  // Getters para testes
  bool? get lastKnownSafeZoneState => _lastKnownSafeZoneState;
  DateTime? get lastNotificationTime => _lastNotificationTime;
  Timer? get repeatingNotificationTimer => _repeatingNotificationTimer;
}

