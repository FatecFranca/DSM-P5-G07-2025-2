name: Build e Deploy das APIs PetDex

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Definir nome da branch
        id: vars
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Login no Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build e Push da API Java
        run: |
          cd api-java
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-java:${BRANCH_NAME} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-java:${BRANCH_NAME}

      - name: Build e Push da API Python
        run: |
          cd api-python
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/api-python:${BRANCH_NAME} .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/api-python:${BRANCH_NAME}

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4
  
      - name: Copiar docker-compose.yml para VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "/home/${{ secrets.AZURE_VM_USER }}/petdex/docker-compose.yml"
  
      - name: Conectar na VM e atualizar containers
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          envs: DATABASE_URI,API_KEY,DOCKERHUB_USERNAME
          script: |
            echo "Atualizando APIs da PetDex na VM..."
  
            cd /home/${{ secrets.AZURE_VM_USER }}/petdex
  
            export DATABASE_URI="${{ secrets.DATABASE_URI }}"
            export API_KEY="${{ secrets.API_KEY }}"
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
  
            docker compose pull
            docker compose down
            docker compose up -d
  
            echo "✅ Deploy concluído com sucesso!"
